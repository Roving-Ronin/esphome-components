substitutions:
  name: "ZMAi-90"
  node_name: zmai90

  # ZMAi-90 TuyaMCU datapoints
  dp_switch: "1"
  dp_total: "17"
  dp_power: "19"
  dp_current: "18"
  dp_voltage: "20"

  # WiFi configuration
  wifi_ssid: !secret wifi_ssid
  wifi_password: !secret wifi_password
  wifi_ap_ssid: "$name Fallback Hotspot"
  wifi_ap_password: !secret wifi_ap_password

  # HA API configuration
  api_password: !secret api_password # disabled if absent or empty

  # OTA configuration
  ota_password: !secret ota_password # disabled if absent or empty

  # Web Server configuration
  web_port: "80"
  web_username: !secret web_username # disabled if absent or empty
  web_password: !secret web_password # disabled if absent or empty

esphome:
  platform: ESP8266
  board: esp01_1m
  name: $node_name

external_components:
  - source: github://dentra/esphome-components

wifi:
  ssid: $wifi_ssid
  password: $wifi_password
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: $wifi_ap_ssid
    password: $wifi_ap_password
  fast_connect: true

captive_portal:

# Enable Home Assistant API
api:
  password: $api_password

# Make sure you can upload new firmware OTA
ota:
  password: $ota_password

web_server:
  port: $web_port
  auth:
    username: $web_username
    password: $web_password

time:
  - platform: homeassistant
    id: g_time
# Uncomment next 4 lines if you want to force update values from Tuya MCU every 10 seconds
#    on_time:
#      seconds: 9,19,29,39,49,59
#      then:
#        - uart.write: [0x55, 0xaa, 0x00, 0x08, 0x00, 0x00, 0x07]

# Enable logging
logger:
  esp8266_store_log_strings_in_flash: false
  # Make sure logging is not using the serial port
  baud_rate: 0

uart:
  rx_pin: GPIO3
  tx_pin: GPIO1
  baud_rate: 9600

# Register the Tuya MCU connection
tuya:
  time_id: g_time

switch:
  # Uncomment next 5 lines to expose main switch to HA
  #  - platform: "tuya"
  #    id: sw_power
  #    name: "$name"
  #    switch_datapoint: $dp_switch
  #    icon: "mdi:power"
  # Uncomment next 5 lines if you want a switch to query the device working status by forces update values from Tuya MCU
  # - platform: "uart"
  #   id: sw_tuya_query_status
  #   data: [0x55, 0xaa, 0x00, 0x08, 0x00, 0x00, 0x07]
  #   name: "$name Force update"
  #   icon: mdi:reload

text_sensor:
  - platform: "template"
    id: current_tariff
    name: "$name Current Tariff"
    icon: "mdi:theme-light-dark"

# Create sensors
sensor:
  # total
  - platform: "tuya"
    id: total
    name: "$name Energy Total"
    sensor_datapoint: $dp_total
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "kWh"
    icon: "mdi:sigma"
    device_class: "energy"
    # i am not interesting in total but tariffs, so you can comment or set it to false if you want internal total sensor
    internal: true

  # active power
  - platform: "tuya"
    id: power
    name: "$name Active Power"
    sensor_datapoint: $dp_power
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    unit_of_measurement: "W"
    icon: "mdi:flash"
    device_class: "power"

  # current
  - platform: "tuya"
    id: current
    name: "${name} Current"
    sensor_datapoint: $dp_current
    accuracy_decimals: 3
    filters:
      - multiply: 0.001
    unit_of_measurement: "A"
    icon: "mdi:current-ac"
    device_class: "current"

  # voltage
  - platform: "tuya"
    id: voltage
    name: "$name Voltage"
    sensor_datapoint: $dp_voltage
    accuracy_decimals: 1
    filters:
      - multiply: 0.1
    unit_of_measurement: "V"
    icon: "mdi:sine-wave"
    device_class: "voltage"

  - platform: "energy_monitoring"
    id: mon
    power: power
    voltage: voltage
    current: current
    apparent_power:
      name: "$name Apparent Power"
    reactive_power:
      name: "$name Reactive Power"
    power_factor:
      name: "$name Power Factor"

  - platform: "energy_statistics"
    id: stat
    total: total
    energy_today:
      id: today
      name: "$name Energy Today"

  - platform: "energy_tariffs"
    id: tariffs
    total: total
    time_offset_service: time_offset_set
    tariffs:
      - name: "$name Peak Tariff"
        id: peak
        icon: "mdi:weather-sunny"
        service: peak_set
      - name: "$name Off-Peak Tariff"
        id: offpeak
        icon: "mdi:weather-night"
        time: "23:00-07:00"
        service: offpeak_set
    on_tariff:
      lambda: |-
        if (x == id(peak))
          id(current_tariff).publish_state("peak");
        else if (x == id(offpeak))
          id(current_tariff).publish_state("off-peak");
        else // should be never happen
          id(current_tariff).publish_state("unknown");
    on_before_tariff:
      - uart.write: [0x55, 0xaa, 0x00, 0x08, 0x00, 0x00, 0x07]

  - platform: template
    id: time_offset
    name: "$name Time Offset"
    icon: mdi:clock-fast
    accuracy_decimals: 0
    unit_of_measurement: "s"
    lambda: |-
      return id(tariffs).get_time_offset();

  - platform: startup
    id: uptime
    name: "$name Uptime"

  - platform: wifi_signal
    name: "$name WiFi Signal"
